master_data <- master_data %>%
mutate(height = height_ft * 12 + height_in) %>%
select(-height_ft, -height_in) %>%
relocate(height, .after = age)
glimpse(master_data)
master_data <- master_data %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign"))
glimpse(master_data)
master_data <- master_data %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign")) %>%
mutate(homegrown = as.factor(homegrown))
glimpse(master_data)
master_data <- master_data %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign")) %>%
mutate(homegrown = as.factor(homegrown)) %>%
relocate (homegrown, .after = nationality)
glimpse(master_data)
duplicated(master_data$player_id)
sum(duplicated(master_data$player_id))
glimpse(master_data)
rm(players_data)
View(player_goals_added_data)
View(player_goals_added_data[[5]][[1]])
View(player_salary_data)
View(team_data)
View(master_data)
View(team_salary_data)
teams <- data$get_teams()
teams2 <- data$teams
View(teams)
View(teams2)
rm(teams,teams2)
View(master_data)
View(team_salary_data)
View(team_data)
View(player_xpass_data)
View(player_goals_added_data)
glimpse(player_xgoals_data)
# 3
#install.packages("ISLR2")
# a
library(tidyverse)
#install.packages("ISLR2")
library(ISLR2)
glimpse(Weekly)
summary(Weekly)
# there are 20 years of data 2010 -1990
# only 12% maximum profit in one week - Lag 1
# average number of shares traded weekly is 1.5 billion - volume
#install.packages("corrplot")
library(corrplot)
plot(Weekly)
corrplot(cor(Weekly[1:8]))
# only year correlated with volume, the rest are neutral.
# b
library(class)
Weekly <- ISLR2::Weekly
Weekly <- Weekly %>%
select(-Year,-Today)
train_pct <- 0.75
set.seed(123)
Z <- sample(nrow(Weekly), floor(train_pct*nrow(Weekly)))
weekly_train_data <- Weekly[Z,] #train
weekly_test_data <- Weekly[-Z,] #test
x_train<- weekly_train_data[1:6]
x_test <- weekly_test_data[1:6]
y_train <- weekly_train_data$Direction
y_test <- weekly_test_data$Direction
library(class)
knn_prediction <-  knn(train = x_train, test = x_test, cl = y_train, k = 7)
# c
table(y_test, knn_prediction)
mean(y_test == knn_prediction) |> round(3)
# d
class <- sum(knn_prediction == y_test)/length(y_test)
class
# e
# Initialize data
err_class <- rep(1:100)
tpr <- rep(1:100)
fpr <- rep(1:100)
# run the loop
for (k in 1:100) {
Yhat <- knn(x_train, x_test, y_train, k = k)
err_class[k] <- mean(Yhat != y_test) # The prediction is not correct
tpr[k] <- sum(Yhat == 1 & y_test == 1) / sum(y_test == 1) # TP/P
fpr[k] <- sum(Yhat == 1 & y_test == 0) / sum(y_test == 0) # FP/N
}
ggplot(tibble(err_class, k = 1:100), aes(x = k, y = err_class)) +
geom_line()
err_class[which.min(err_class)]
# b
library(class)
Weekly <- ISLR2::Weekly
Weekly <- Weekly %>%
select(-Year,-Today)
train_pct <- 0.75
set.seed(123)
Z <- sample(nrow(Weekly), floor(train_pct*nrow(Weekly)))
weekly_train_data <- Weekly[Z,] #train
weekly_test_data <- Weekly[-Z,] #test
x_train<- weekly_train_data[1:6]
x_test <- weekly_test_data[1:6]
y_train <- weekly_train_data$Direction
y_test <- weekly_test_data$Direction
library(class)
knn_prediction <-  knn(train = x_train, test = x_test, cl = y_train, k = 7)
library(itscalledsoccer)
library(dplyr)
library(keyring)
library(httr2)
library(tidyverse)
library(jsonlite)
library(purrr)
library(lubridate)
# retrieving the environment
data <- AmericanSoccerAnalysis$new()
# retrieving data
players_data <- data$players
team_data <- data$teams
player_salary_data <- data $get_player_salaries()
player_goals_added_data <- data$get_player_goals_added()
player_xpass_data <- data$get_player_xpass()
player_xgoals_data <- data$get_player_xgoals()
rm(data)
# Creating master player-level dataset by season
master_data <- player_salary_data
glimpse(master_data)
sum(duplicated(master_data[, c("player_id", "team_id", "season_name", "base_salary", "guaranteed_compensation", "competition")]))
# there are duplicates based on mlspa_release
sum(duplicated(master_data[, c("player_id", "team_id", "season_name", "mlspa_release")]))
# keeping the later salaries by mlspa_release
master_data <- master_data %>%
arrange(player_id, team_id, season_name, mlspa_release)
master_data <- master_data %>%
distinct(player_id, team_id, season_name, .keep_all = TRUE) %>%
select(-mlspa_release)
rm(player_salary_data)
glimpse(master_data)
# joining player data
glimpse(players_data)
sum(duplicated(players_data$player_id))
unmatched_in_master <- anti_join(master_data, players_data, by = "player_id") # everyone is the master data appears in player data
unmatched_in_player <- anti_join(players_data, master_data, by = "player_id") # there are players in the player data who arent in the master. regardless in the end i want all the players so i'll keep them and only dropped them during model training.
rm(unmatched_in_master, unmatched_in_player)
master_data <- full_join(master_data, players_data, by= "player_id")
rm(players_data)
# joining team data
glimpse(team_data)
team_data <- team_data %>%
mutate(team_competitions = competitions) %>%
select(-competitions)
master_data <- full_join(master_data, team_data, by = "team_id")
rm(team_data)
# Given the timeframe, I am excluding the player goals added data. I didnt understand the meaning of the values. in future iterations on the app this data should be looked into again.
glimpse(player_goals_added_data)
rm(player_goals_added_data)
glimpse(player_xgoals_data)
sum(duplicated(player_xgoals_data$player_id))
sum(duplicated(master_data$player_id))
# need to import it 1 season at a time and label the season_name in order to join it properly with master data
data <- AmericanSoccerAnalysis$new()
for (year in 2013:2025) {
var_name <- paste0("player_xpass_data_", year)
temp <- data$get_player_xpass(season_name = as.character(year)) %>%
mutate(season_name = year)
assign(var_name, temp)
}
rm(data)
View(player_xpass_data_2015)
glimpse(player_xpass_data_2015)
library(itscalledsoccer)
library(dplyr)
library(keyring)
library(httr2)
library(tidyverse)
library(jsonlite)
library(purrr)
library(lubridate)
# retrieving the environment
data <- AmericanSoccerAnalysis$new()
# retrieving data
players_data <- data$players
team_data <- data$teams
player_salary_data <- data $get_player_salaries()
player_goals_added_data <- data$get_player_goals_added()
player_xpass_data <- data$get_player_xpass()
player_xgoals_data <- data$get_player_xgoals()
rm(data)
# Creating master player-level dataset by season
master_data <- player_salary_data
glimpse(master_data)
sum(duplicated(master_data[, c("player_id", "team_id", "season_name", "base_salary", "guaranteed_compensation", "competition")]))
# there are duplicates based on mlspa_release
sum(duplicated(master_data[, c("player_id", "team_id", "season_name", "mlspa_release")]))
# keeping the later salaries by mlspa_release
master_data <- master_data %>%
arrange(player_id, team_id, season_name, mlspa_release)
master_data <- master_data %>%
distinct(player_id, team_id, season_name, .keep_all = TRUE) %>%
select(-mlspa_release)
rm(player_salary_data)
glimpse(master_data)
# joining player data
glimpse(players_data)
sum(duplicated(players_data$player_id))
unmatched_in_master <- anti_join(master_data, players_data, by = "player_id") # everyone is the master data appears in player data
unmatched_in_player <- anti_join(players_data, master_data, by = "player_id") # there are players in the player data who arent in the master. regardless in the end i want all the players so i'll keep them and only dropped them during model training.
rm(unmatched_in_master, unmatched_in_player)
master_data <- full_join(master_data, players_data, by= "player_id")
rm(players_data)
# joining team data
glimpse(team_data)
team_data <- team_data %>%
mutate(team_competitions = competitions) %>%
select(-competitions)
master_data <- full_join(master_data, team_data, by = "team_id")
rm(team_data)
# Given the timeframe, I am excluding the player goals added data. I didnt understand the meaning of the values. in future iterations on the app this data should be looked into again.
glimpse(player_goals_added_data)
rm(player_goals_added_data)
glimpse(player_xgoals_data)
sum(duplicated(player_xgoals_data$player_id))
sum(duplicated(master_data$player_id))
# need to import it 1 season at a time and label the season_name in order to join it properly with master data
data <- AmericanSoccerAnalysis$new()
for (year in 2013:2025) {
var_name <- paste0("player_xpass_data_", year)
temp <- data$get_player_xpass(season_name = as.character(year)) %>%
mutate(season_name = year)
assign(var_name, temp)
}
#now i can run a loop to do a full join by player_id and season_name; and then clean up the environment
player_xpass_all <- bind_rows(
lapply(2013:2025, function(year) get(paste0("player_xpass_data_", year)))
)
rm(list = paste0("player_xpass_data_", 2013:2025), player_xpass_data)
test <- full_join(master_data, player_xpass_all, by= c("player_id", "season_name", "competition"))
test <- test%>%
mutate(match = ifelse(team_id.x == team_id.y, 1, 0))
table(test$match) # I viewed the data and team_id.y is a list so i will prioritize team_id.x first
rm(test)
master_data <- full_join(master_data, player_xpass_all, by= c("player_id", "season_name", "competition"))
rm(player_xpass_all, temp)
glimpse(player_xgoals_data)
for (year in 2013:2025) {
var_name <- paste0("player_xgoals_data_", year)
temp <- data$get_player_xgoals(season_name = as.character(year)) %>%
mutate(season_name = year)
assign(var_name, temp)
}
#now i can run a loop to do a full join by player_id and season_name; and then clean up the environment
player_xgoals_all <- bind_rows(
lapply(2013:2025, function(year) get(paste0("player_xgoals_data_", year)))
)
rm(list = paste0("player_xgoals_data_", 2013:2025), player_xgoals_data)
test <- full_join(master_data, player_xgoals_all, by= c("player_id", "season_name", "competition"))
View(test)
rm(test)
rm(player_xgoals_all, temp)
git status
library(shiny); runApp('Player_Performance_Lab.R')
View(master_data)
saveRDS(master_data, file = "../data/01 preprocessed data.rds")
load("../data/01 preprocessed.rds")
load("../data/01 preprocessed data.rds")
readRDS("../data/01 preprocessed data.rds")
master_data <- readRDS("../data/01 preprocessed data.rds")
# Correcting data types
glimpse(master_data)
library(tidyverse)
# Correcting data types
glimpse(master_data)
test <- master_data %>%
mutate(position = as.factor(position),
competition = as.factor(competition))
glimpse(test)
test <- master_data %>%
mutate(position = as.factor(position),
competition = as.factor(competition),
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date))
) %>%
relocate(age, .after = birth_date)
glimpse(test)
test <- master_data %>%
mutate(position = as.factor(position),
competition = as.factor(competition),
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date)),
age = as.integer(age)
) %>%
relocate(age, .after = birth_date)
glimpse(test)
test <- master_data %>%
mutate(position = as.factor(position),
competition = as.factor(competition),
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date)),
age = as.integer(age)
) %>%
relocate(age, .after = birth_date) %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign")) %>%
mutate(homegrown = as.factor(homegrown)) %>%
relocate (homegrown, .after = nationality)
glimpse(test)
test <- master_data %>%
mutate(position = as.factor(position),
competition = as.factor(competition),
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date)),
age = as.integer(age)
) %>%
relocate(age, .after = birth_date) %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign")) %>%
mutate(homegrown = as.factor(homegrown)) %>%
relocate (homegrown, .after = nationality) %>%
mutate(height_inches = height_ft * 12 + height_in) %>%
relocate(height_inches, .after = height_in)
glimpse(test)
table(test$general_position)
table(test$position)
summarise(test$pass_completion_percentage)
summary(test$pass_completion_percentage)
summary(test$share_team_touches)
summary(test$count_games)
master_data <- master_data %>%
mutate(position = as.factor(position),
competition = as.factor(competition),
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date)),
age = as.integer(age)
) %>%
relocate(age, .after = birth_date) %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign")) %>%
mutate(homegrown = as.factor(homegrown)) %>%
relocate (homegrown, .after = nationality) %>%
mutate(height_inches = height_ft * 12 + height_in,
height_inches = as.integer(height_inches)) %>%
relocate(height_inches, .after = height_in) %>%
relocate(competitions, .after = competition) %>% # I need to look into this more closely but competition will be prioritized due to it being a single character vs a list
relocate(team_competitions, .after = competitions) %>% # need to look into this more closely
relocate(general_position, .after = position) %>%
mutate(pass_completion_percentage = 100 * pass_completion_percentage,
xpass_completion_percentage = 100 * xpass_completion_percentage,
share_team_touches = 100 * share_team_touches) %>%
glimpse(master_data)
master_data <- master_data %>%
mutate(position = as.factor(position),
competition = as.factor(competition),
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date)),
age = as.integer(age)
) %>%
relocate(age, .after = birth_date) %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign")) %>%
mutate(homegrown = as.factor(homegrown)) %>%
relocate (homegrown, .after = nationality) %>%
mutate(height_inches = height_ft * 12 + height_in,
height_inches = as.integer(height_inches)) %>%
relocate(height_inches, .after = height_in) %>%
relocate(competitions, .after = competition) %>% # I need to look into this more closely but competition will be prioritized due to it being a single character vs a list
relocate(team_competitions, .after = competitions) %>% # need to look into this more closely
relocate(general_position, .after = position) %>%
mutate(pass_completion_percentage = 100 * pass_completion_percentage,
xpass_completion_percentage = 100 * xpass_completion_percentage,
share_team_touches = 100 * share_team_touches)
glimpse(master_data)
# pick up from age
rm(test)
# Checking and Removing duplicates
dum(duplicated(master_data))
# Checking and Removing duplicates
sum(duplicated(master_data))
sum(duplicated(master_data[, c("player_id", "team_id", "season_name")]))
View(master_data)
sum(duplicated(master_data[, c("player_id", "team_id.x", "season_name")]))
duplicated(master_data[, c("player_id", "team_id.x", "season_name")])
duplicates <- master_data %>%
group_by(player_id, team_id, season_name) %>%
summarise(count = n(), .groups = "drop") %>%
filter(count > 1)
duplicates <- master_data %>%
group_by(player_id, team_id.x, season_name) %>%
summarise(count = n(), .groups = "drop") %>%
filter(count > 1)
View(duplicates)
View(duplicates)
duplicates <- master_data %>%
group_by(player_id, team_id.x, season_name) %>%
filter(n() > 1) %>%   # keeps all rows where this group occurs more than once
ungroup()
View(duplicates)
duplicates <- master_data %>%
group_by(player_id, team_id.x, season_name) %>%
filter(n() > 1) %>%   # keeps all rows where this group occurs more than once
ungroup() %>%
arrange(player_id, team_id.x, season_name) %>%
sort(player_id, team_id.x, season_name)
View(duplicates)
duplicates <- master_data %>%
group_by(player_id, team_id.x, season_name) %>%
filter(n() > 1) %>%   # keeps all rows where this group occurs more than once
ungroup() %>%
arrange(player_id, team_id.x, season_name)
View(duplicates)
table(duplicates$team_id.x)
table(duplicates$season_name)
sum(duplicated(duplicates[, c("player_id", "season_name")])) # duplicates across these 3 variables
sum(duplicated(duplicates[, c("player_id", "team_id.y" "season_name")])) # duplicates across these 3 variables
sum(duplicated(duplicates[, c("player_id", "team_id.y", "season_name")])) # duplicates across these 3 variables
class(duplicates$team_id.y)
View(duplicates)
max(sapply(duplicates$team_id.y, length))
duplicates <- duplicates %>%
mutate(team_id.x = as.character(team_id.y))
View(duplicates)
test <- left_join(duplicates, master_data, by= c("player_id", "team_id.x", "season_name"))
View(test)
duplicates1 <- duplicates %>%
select(player_id, team_id.x, season_name)
test <- left_join(duplicates1, master_data, by= c("player_id", "team_id.x", "season_name"))
View(test)
test <- right_join(duplicates1, master_data, by= c("player_id", "team_id.x", "season_name"))
sum(duplicated(master_data[, c("player_id", "team_id.x", "season_name")])) # duplicates across these 3 variables
sum(duplicated(master_data[, c("player_id", "team_id.x", "season_name")])) # duplicates across these 3 variables
sum(duplicated(test[, c("player_id", "team_id.x", "season_name")])) # duplicates across these 3 variables
sum(duplicated(test[, c("player_id", "team_id.x", "season_name")])) # duplicates across these 3 variables
test <- left_join(duplicates1, master_data, by= c("player_id", "team_id.x", "season_name"))
View(test)
library(shiny); runApp('Player_Performance_Lab.R')
# Checking and Removing duplicates
sum(duplicated(master_data)) # no duplicates accross all rows
sum(duplicated(master_data[, c("player_id", "team_id.x", "season_name")])) # duplicates across these 3 variables
duplicates <- master_data %>%
group_by(player_id, team_id.x, season_name) %>%
filter(n() > 1) %>%
ungroup() %>%
arrange(player_id, team_id.x, season_name)
View(duplicates)
duplicates <- master_data %>%
group_by(player_id, team_id.x, season_name) %>%
mutate(count = n()) %>%
filter(n() > 1) %>%
ungroup() %>%
arrange(player_id, team_id.x, season_name)
View(duplicates)
table(duplicates$count)
table(duplicates$team_id.x)
sum(duplicated(duplicates[, c("player_id", "team_id.y", "season_name")])) # when i use the team_id.y variable they are unique
class(duplicates$team_id.y) # its a list
max(sapply(duplicates$team_id.y, length)) # max number of elements is 1 so shouldnt cause any big issues
duplicates <- duplicates %>%
mutate(team_id.x = as.character(team_id.y))
glimpse(master_data)
setdiff(duplicates1$team_id.x, master_data$team_id.x)
test <- left_join(duplicates, master_data, by= c("player_id", "team_id.x", "season_name"))
test1 <- left_join(
duplicates1,
master_data %>% select(-player_id, -team_id.x, -season_name),
by = c("player_id", "team_id.x", "season_name")
)
test1 <- left_join(
duplicates,
master_data %>% select(-player_id, -team_id.x, -season_name),
by = c("player_id", "team_id.x", "season_name")
)
test <- left_join(duplicates, master_data, by= c("player_id", "team_id.x", "season_name"))
View(test)
View(duplicates)
View(master_data)
# Checking and Removing duplicates
sum(duplicated(master_data)) # no duplicates accross all rows
sum(duplicated(master_data[, c("player_id", "team_id.x", "season_name")])) # 339 duplicates across these 3 variables
# I need to look at this section again
sum(is.na(master_data$team_id.x))
22817/33039
sum(is.na(master_data$team_id.y))
test <- master_data %>%
mutate(team_id.x = ifelse(is.na(), team_id.y, team_id.x))
test <- master_data %>%
mutate(team_id.x = ifelse(is.na(team_id.x), team_id.y, team_id.x))
sum(is.na(test$team_id.x))
sum(duplicated(test[, c("player_id", "team_id.x", "season_name")])) # 339 duplicates across these 3 variables
# Checking and Removing duplicates
sum(duplicated(master_data)) # no duplicates accross all rows
sum(duplicated(master_data[, c("player_id", "team_id.x", "season_name")])) # 339 duplicates across these 3 variables
sum(is.na(master_data$team_id.x))
sum(is.na(master_data$team_id.x))
sum(is.na(test$team_id.x))
sum(duplicated(test[, c("player_id", "team_id.x", "season_name")])) # 339 duplicates across these 3 variables
duplicates_test <- master_data %>%
group_by(player_id, team_id.x, season_name) %>%
mutate(count = n()) %>%
filter(n() > 1) %>%
ungroup() %>%
arrange(player_id, team_id.x, season_name)
duplicates_test <- test %>%
group_by(player_id, team_id.x, season_name) %>%
mutate(count = n()) %>%
filter(n() > 1) %>%
ungroup() %>%
arrange(player_id, team_id.x, season_name)
View(duplicates_test)
runApp('Player_Performance_Lab.R')
View(master_data)
View(master_data)
View(master_data)
runApp('Player_Performance_Lab.R')
View(master_data)
runApp('Player_Performance_Lab.R')
runApp('Player_Performance_Lab.R')
