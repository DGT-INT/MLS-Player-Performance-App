)
),
f7Tabs(
id = "main_tabs",
f7Tab(tabName = "Home_tab", active = TRUE,
f7Card("Welcome to the Home Page")
),
f7Tab(tabName = "BallWork_tab",
f7Card("Welcome to the Ball work Page")
)
)
)
)
),
server = function(input, output, session) {}
)
library(shiny)
library(shinyMobile)
{
app_options <- list(
theme = "ios",
dark = TRUE
)
} # Application settings/options
shinyApp(
ui = f7Page(
title = "Tricko Fitness",
options = app_options,
f7SingleLayout(
navbar = f7Navbar(title = "Tricko Fitness",
leftPanel = TRUE,
id = "left_p_id"),
panels = tagList(
f7Panel(title = "Menu", side = "left", effect = "push",
f7PanelMenu(inset = TRUE, outline = TRUE,
# Use items as tab navigation only
f7PanelItem(tabName = "Home_tab", title = "Home", icon = f7Icon("house"), active = TRUE),
f7PanelItem(tabName = "BallWork_tab", title = "Ball Work", icon = f7Icon("sportscourt_fill")),
f7PanelItem(tabName = "Gym_tab", title = "Gym Work", icon = f7Icon("rocket"))
)
)
)
)
),
server = function(input, output, session) {}
)
help("updateF7Panel")
library(shiny)
library(shinyMobile)
ui <- f7Page(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
theme = "light",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
animated = TRUE,
swipeable = TRUE,
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
library(shiny)
library(shinyMobile)
ui <- f7Page(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
animated = TRUE,
swipeable = TRUE,
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
library(shiny)
library(shinyMobile)
ui <- f7Page(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
swipeable = TRUE,
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
library(shiny)
library(shinyMobile)
ui <- f7Page(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
server <- function(input, output, session) {
observeEvent(input$open_panel, {
updateF7Panel("sidepanel", session = session, open = TRUE)
})
}
library(shiny)
library(shinyMobile)
ui <- f7Page(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
server = function(input, output, session) {
observeEvent(input$open_panel, {
updateF7Panel("sidepanel", session = session, open = TRUE)
})
}
library(shiny)
library(shinyMobile)
ui = shinyApp(
title = "My App",
options = list(theme = "ios"),
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
library(shiny)
library(shinyMobile)
ui = shinyApp(
title = "My App",
f7Panel(
id = "sidepanel",
side = "left",
f7PanelMenu(
f7PanelItem(title = "Home", tabName = "tab1"),
f7PanelItem(title = "About", tabName = "tab2")
)
),
f7SingleLayout(
navbar = f7Navbar(title = "Demo", hairline = TRUE, shadow = TRUE),
toolbar = f7Toolbar(
position = "bottom",
f7Button(inputId = "open_panel", label = "☰")
),
f7Tabs(
f7Tab(tabName = "tab1", title = "Home", icon = f7Icon("house"), "Welcome Home!"),
f7Tab(tabName = "tab2", title = "About", icon = f7Icon("info"), "About this App")
)
)
)
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
help("f7PanelMenu")
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
runApp('~/Documents/DGT International/Projects/TrickoFitness/Code/debug_TrickoFitness_app.R')
library(lubridate)
data <- AmericanSoccerAnalysis$new()
library(lubridate)
data <- AmericanSoccerAnalysis$new()
D <- AmericanSoccerAnalysis$get_players()
library(itscalledsoccer)
library(dplyr)
library(keyring)
library(httr2)
library(tidyverse)
library(jsonlite)
library(purrr)
library(lubridate)
data <- AmericanSoccerAnalysis$new()
D <- AmericanSoccerAnalysis$get_players()
View(data)
players <- data$get_players()
players2 <- data$players
glimpse(players, players2)
glimpse(players)
glimpse(players2)
table(players2$competitions)
plot(players2$competitions)
table1(players2$competitions)
table(players2$competitions)
sum(is.na(players2$competitions))
str(players2$competitions)
View(players2)
distinct(players2$competitions)
View(players2)
unique(unlist(players2$competitions))
players_data <- data$players
View(players_data)
View(data)
d <- data$referees
View(d)
d <- data$managers
View(d)
rm(d)
test_data <- data$stadia
View(data)
View(test_data)
test_data <- data$teams
View(test_data)
test_data <- data$latest_update_timestamp
test_data <- data$LEAGUES
test_data <- data$clone()
View(test_data)
test_data <- data$get_game_xgoals()
View(test_data)
test_data <- data$get_team_salaries()
View(test_data)
rm(test_data)
rm(players, players2)
test_data1 <- data$get_game_xgoals()
test_data1 <- data$get_game_xgoals()
test_data2 <- data$get_team_goals_added()
test_data3 <- data$get_team_xpass()
test_data4 <- data$get_team_xgoals()
test_data5 <- data$get_goalkeeper_goals_added()
test_data6 <- data$get_goalkeeper_xgoals()
test_data7 <- data$get_player_salaries()
test_data8 <- data$get_player_goals_added()
test_data9 <- data$get_player_xpass()
test_data10 <- data$get_player_xgoals()
test_data11 <- data$get_games()
test_data12 <- data$get_teams()
test_data13 <- data$get_players()
View(test_data1)
View(test_data2)
View(test_data2[[3]][[1]])
View(test_data3)
View(test_data4)
View(test_data5)
View(test_data5[[4]][[1]])
test_data6 <- data$get_goalkeeper_xgoals()
View(test_data6)
View(test_data7)
View(test_data8)
View(test_data8[[5]][[1]])
View(test_data9)
View(test_data10)
View(test_data11)
View(test_data12)
team_data <- data$teams
View(team_data)
View(test_data13)
rm(list = ls())
# retreiving the environment
data <- AmericanSoccerAnalysis$new()
# retreving data
players_data <- data$players
team_data <- data$teams
team_salary_data <- data$get_team_salaries()
player_salary_data <- data $get_player_salaries()
player_goals_added_data <- data$get_player_goals_added()
player_xpass_data <- data$get_player_xpass()
player_xgoals_data <- data$get_player_xgoals()
# creating master dataframe at the player level
master_data <- players_data
View(master_data)
glimpse(master_data)
count(unique(unlist(master_data$nationality)))
unique(unlist(master_data$nationality))
sum(unique(unlist(master_data$nationality)))
length(unique(unlist(master_data$nationality)))
View(player_salary_data)
View(player_goals_added_data)
View(players_data)
glimpse(master_data)
master_data$birth_date <- ymd(master_data$birth_date)
glimpse(master_data)
master_data$age <- year(today()) - year(master_data$birth_date)
glimpse(master_data)
master_data$age <- master_data$age - (yday(today()) < yday(master_data$birth_date))
glimpse(master_data)
master_data <- master_data %>%
mutate(
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date))
)
glimpse(master_data)
# quick clean of player data
master_data <- master_data %>%
mutate(
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date))
) %>%
select(-birth_date) %>%
relocate(age, .after = player_name)
glimpse(master_data)
master_data <- master_data %>%
mutate(height = height_ft * 12 + height_in)
glimpse(master_data)
master_data <- master_data %>%
mutate(height = height_ft * 12 + height_in) %>%
select(-height_ft, height_in) %>%
relocate(height, .after = age)
glimpse(master_data)
master_data <- master_data %>%
mutate(height = height_ft * 12 + height_in) %>%
select(-height_ft, -height_in) %>%
relocate(height, .after = age)
# creating master data frame at the player level
master_data <- players_data
# quick clean of player data
master_data <- master_data %>%
mutate(
birth_date = ymd(birth_date),
age = year(today()) - year(birth_date) - (yday(today()) < yday(birth_date))
) %>%
select(-birth_date) %>%
relocate(age, .after = player_name)
master_data <- master_data %>%
mutate(height = height_ft * 12 + height_in) %>%
select(-height_ft, -height_in) %>%
relocate(height, .after = age)
glimpse(master_data)
master_data <- master_data %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign"))
glimpse(master_data)
master_data <- master_data %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign")) %>%
mutate(homegrown = as.factor(homegrown))
glimpse(master_data)
master_data <- master_data %>%
mutate(homegrown = ifelse(nationality %in% c("USA", "Canada"), "Domestic", "Foreign")) %>%
mutate(homegrown = as.factor(homegrown)) %>%
relocate (homegrown, .after = nationality)
glimpse(master_data)
duplicated(master_data$player_id)
sum(duplicated(master_data$player_id))
glimpse(master_data)
rm(players_data)
View(player_goals_added_data)
View(player_goals_added_data[[5]][[1]])
View(player_salary_data)
View(team_data)
View(master_data)
View(team_salary_data)
teams <- data$get_teams()
teams2 <- data$teams
View(teams)
View(teams2)
rm(teams,teams2)
View(master_data)
View(team_salary_data)
View(team_data)
View(player_xpass_data)
View(player_goals_added_data)
glimpse(player_xgoals_data)
# 3
#install.packages("ISLR2")
# a
library(tidyverse)
#install.packages("ISLR2")
library(ISLR2)
glimpse(Weekly)
summary(Weekly)
# there are 20 years of data 2010 -1990
# only 12% maximum profit in one week - Lag 1
# average number of shares traded weekly is 1.5 billion - volume
#install.packages("corrplot")
library(corrplot)
plot(Weekly)
corrplot(cor(Weekly[1:8]))
# only year correlated with volume, the rest are neutral.
# b
library(class)
Weekly <- ISLR2::Weekly
Weekly <- Weekly %>%
select(-Year,-Today)
train_pct <- 0.75
set.seed(123)
Z <- sample(nrow(Weekly), floor(train_pct*nrow(Weekly)))
weekly_train_data <- Weekly[Z,] #train
weekly_test_data <- Weekly[-Z,] #test
x_train<- weekly_train_data[1:6]
x_test <- weekly_test_data[1:6]
y_train <- weekly_train_data$Direction
y_test <- weekly_test_data$Direction
library(class)
knn_prediction <-  knn(train = x_train, test = x_test, cl = y_train, k = 7)
# c
table(y_test, knn_prediction)
mean(y_test == knn_prediction) |> round(3)
# d
class <- sum(knn_prediction == y_test)/length(y_test)
class
# e
# Initialize data
err_class <- rep(1:100)
tpr <- rep(1:100)
fpr <- rep(1:100)
# run the loop
for (k in 1:100) {
Yhat <- knn(x_train, x_test, y_train, k = k)
err_class[k] <- mean(Yhat != y_test) # The prediction is not correct
tpr[k] <- sum(Yhat == 1 & y_test == 1) / sum(y_test == 1) # TP/P
fpr[k] <- sum(Yhat == 1 & y_test == 0) / sum(y_test == 0) # FP/N
}
ggplot(tibble(err_class, k = 1:100), aes(x = k, y = err_class)) +
geom_line()
err_class[which.min(err_class)]
# b
library(class)
Weekly <- ISLR2::Weekly
Weekly <- Weekly %>%
select(-Year,-Today)
train_pct <- 0.75
set.seed(123)
Z <- sample(nrow(Weekly), floor(train_pct*nrow(Weekly)))
weekly_train_data <- Weekly[Z,] #train
weekly_test_data <- Weekly[-Z,] #test
x_train<- weekly_train_data[1:6]
x_test <- weekly_test_data[1:6]
y_train <- weekly_train_data$Direction
y_test <- weekly_test_data$Direction
library(class)
knn_prediction <-  knn(train = x_train, test = x_test, cl = y_train, k = 7)
